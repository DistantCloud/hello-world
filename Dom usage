getElementById()  获取id元素；
getElementsByTagName()   获取标签元素；
getElementsByName()   获取name的值；
getAttribute()   通过元素节点的属性名称获取属性的值；
setAttribute()   增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值；

DOM节点有三个重要的属性 nodeName 节点的名称 nodeValue 节点的值 nodeType 节点的类型
node Name：
1.元素节点的nodeName与标签名相同；
2.属性节点的node Name是属性的名称；
3.文本节点的node Name永远是#text；
4.文档节点的node Name永远是#document；
nodeValue：
1.元素节点的nodevalue是undefined或null；
2.文本节点的nodeValue是文本自身；
3，属性节点的nodeValue是属性的值；
nodeType：
节点的类型是只读的 一下常用的几种节点类型：
元素类型     节点类型
  元素          1
  属性          2
  文本          3
  注释          8
  文档          9
  getElementsByTagName().childNodes   访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。
  .firstChild   元素的第一个子节点；
  .lastChild   元素的最后一个节点；
  .nextSibling   属性可返回某个节点之后紧跟的节点（处于同一树层级中）；
  .previousSibling   属性可返回某个节点之前紧跟的节点（处于同一树层级中）;
  .appendChild(newnode)   在指定节点后面添加一个新的节点；
  .createElement("p")   添加新节点<p>;
  .insertBefore()   方法可在已有的子节点前插入一个新的子节点;
  .removeChild()   方法从子节点列表中删除某个节点;
  .replaceChild()   实现子节点(对象)的替换。返回被替换对象的引用 只有父节点才能调用;
  .createElement()   方法可创建元素节点。此方法可返回一个 Element 对象;


  对于IE9+、Chrome、Firefox、Opera 以及 Safari：
  .window.innerHeight - 浏览器窗口的内部高度
  .window.innerWidth - 浏览器窗口的内部宽度
  对于 Internet Explorer 8、7、6、5：
  .document.documentElement.clientHeight表示HTML文档所在窗口的当前高度。
  .document.documentElement.clientWidth表示HTML文档所在窗口的当前宽度。
  或者
  .Document对象的body属性对应HTML文档的<body>标签
  .document.body.clientHeight
  .document.body.clientWidth
  .body.scrollWidth（scrollHeight）   显示网页的宽或者高；
  .documentElement.scrollWidth（scrollHeight）   也可以显示网页的宽和高；
  .documentElement.offsetWidth（.offsetHeight）   显示网页内容的宽和高；
  


  JQurey对象 ：
  $("id")   id选择器；
  $（".class"）   类选择器；
  $("Element")   元素选择器；
  $("*")   选中所有的元素；
  $('parent > child')   子选择器：（选择parent里的所有child元素）；
  $('ancestor descendant')   后代选择器：选择给定的祖先元素的所有后代元素 可以是子元素  孙子 或者曾孙
  $("prev + next")   相邻兄弟选择器：选择所有紧接在prev元素后面的 next元素；
  $("prev ~ siblings")   一般兄弟选择器：匹配prve元素后的所有兄弟元素 具有相同的父元素 并匹配过滤siblings选择器；
  $(":first")   匹配第一个元素；
  $(":last")   匹配最后一个元素；
  $(":not(selector)")   一个用来过滤的选择器 选择所有元素去除不匹配给定的选择器元素；
  $(":eq(index)")   在匹配的集合中选择索引值为index的元素；
  $(":gt(index)")   选择匹配集合中所有大于给定index（索引值）的元素；
  $(":even")   选择索引值为偶数的元素，从0开始计数；
  $(":odd")   选择索引值为奇数的元素，从0开始计数；
  $(":it(index)")   选择匹配集合中所有索引值小于给定index参数的元素；
  $(":header")   选择所有标题元素 想h1 h2 h3；
  $(":lang(language)")   选择指定语言的所有元素；
  $(":root")   选择该文档的根元素；
  $(":animated")   选择所有正在执行动画效果的元素；

  内容筛选选择器：         
  $(":contains(text)")   选择所有包含指定文本的元素；
  $(":parent")   选择所有含有子元素或者文本的元素；        
  $(":empyt")   选择没有子元素的元素（包括文本节点）；
  $(":has(selector)")   选择元素中至少包含指定选择器的元素；

  可见性筛选选择器：
  $(":visble")   选择所有显示的元素；
  $(":hidden")   选择所有隐藏的元素；

  属性筛选选择器：
  $("[qttribute|='value']")   选择指定属性值等于给定字符串或以该文字串为前缀（该字符串后跟一个连字符"-"）的元素；
  $("[attribute*='value']")   选择指定属性具有包含一个给定的字符串的元素（选择给定的属性是以包含某些值的元素）；
  $("[attribute~='value']")   选择指定属性用空格分隔的值中包含一个给定值得元素；
  $("[attribute='value']")   选择指定属性是给定值的元素；
  $("[attribute!='value']")   选择不存在指定属性 或者指定的属性值不等于给定值的元素；
  $("[attribute^='value']")   选择制定属性是以给定字符串开始的元素；
  $("[attribute$='value']")   选择指定属性是以给定值结尾的元素 这个比较是区分大小写的；
  $("[attribute]")   选择所有具有制定属性的元素 该属性可以是任何值；
  $("[attributeFilter1][attributeFilterN]")   选择匹配所有指定的属性选择器的元素；

  子元素筛选选择器：
  $(":first-child")   选择所有父级元素下的第一个子元素；
  $(":last-child")   选择所有父级元素的最后一个元素；
  $(":only-child")   如果某个元素是其父元素的唯一子元素 那么他就会被选中；
  $(":nth-child")   选择的他们所有的父元素的第n个子元素；
  $(":nth-last-child")   选择所有他们父元素的第n个元素，计数从最后一个元素开始到第一个元素；

  表单元素选择器：
  $(":input")   选择所有input textarea select 和button元素；
  $(":text")   匹配所有文本框；
  $(":password")   匹配所有密码框；
  $(":radio")   匹配所有单选按钮；
  $(":checkbox")   匹配所有复选框；
  $(":submit")   匹配所有提交按钮；
  $(":image")   匹配所有图像域；
  $(":reset")   匹配所有重置按钮；
  $(":button")   匹配所有按钮；
  $(":file")   匹配所有文件域；

  表单对象属性筛选选择器：
  $(":enabled")   选中可用的表单元素；
  $(":disabled")   选取不可用的表单元素；
  $(":checked")   选取被选中的<input>元素；
  $(":selected")   选取被选中的<option>元素；

  特殊选择器this：
  $('#element').click(function(){   选取id元素调用click点击函数；
  $(this).css('color','blue');})   用this关键字指向所属对象；

  JQurey属性与样式之 .attr（）与 .removeAttr()
  attr(属性名):   获取属性的值；
  attr(属性名,属性值):   设置属性的值；
  attr(属性名,函数值):   设置属性的函数值；
  attr(attributes):   给指定元素设置多个属性值 即：（属性名一："属性值一" 属性名二：""）
  .removeAttr( attributeName ) : 为匹配的元素集合中的每个元素中移除一个属性（attribute）

  JQurey属性与样式之html()及.text()
  .html()   不传入值 就是获取集合中第一个匹配元素的HTML内容；  
  .html(htmlString)   设置每一个匹配元素的html内容；  
  .html(function(index,oldhtml))   用来返回设置HTML内容的一个函数；
  .text()   得到匹配元素集合中每个元素的合并文本 包括他们的后代；
  .text(textString)   用于设置匹配元素内容的文本；
  .text(function(index,text))   用来返回设置文本内容的一个函数；

  JQ属性样式val()：
  val()   无参数  获取匹配的元素集合中第一个元素的当前值；
  val(value)   设置匹配的元素集合中的每一个元素的值；
  val(function)   一个用来返回设置值的函数；

  .html() .text() .val()的差异总结：
  .html(),.text(),.val()三种方法都是用来读取选定元素的内容；只不过.html()是用来读取元素的html内容（包括html标签 .text()用来读取元素的纯文本内容 包括其后代元素；
  .val()是用来读取表单元素的"value"值。其中.html()和.text()方法不能使用在表单元素上 而.val()只能使用在表单元素上；另外.html()方法使用在多个元素上时 只读取第一个元素；
  .val()方法和.html()相同 如果其应用在多个元素上时 只能读取第一个表单元素的"value"值 但是.text()和他们不一样如果.text()应用在多个元素上时 将会读取所有选中元素的文本内容；
  .html(htmlString),.text(textString)和.val(value)三种方法都是用来替换选中元素的内容 如果三个方法同时运用在多个元素上时 那么将会替换所有选中元素的内容；
  .html(),.text(),.val()都可以使用回调函数的返回值来动态的改变多个元素的内容；

  JQ属性样式之增加样式.addClass():
  .addClass(className):   为每个匹配元素索要增加的一个或者多个样式名；
  .addClass(function(index,currentClass)):   这个函数返回一个或者更多用空格隔开的要增加的样式名；
  indexOf（string）：   返回 字符串中index（string）的string在父串首次出现的位置从0开始 如果没有返回-1；

  JQ属性样式之删除样式.removeClass():
  .removeClass([className]):   每个匹配元素移除的一个或多个将要被移除的样式名；
  .removeClass(function(index,class)):   一个函数，返回一个或多个将要被移除的样式名；

  JQ属性样式之切换样式.toggleClass():
  .toggleClass(className):   在匹配的元素集合中的每个元素上用来切换的一个或多个（用空格分开）样式类名；
  .toggleClass(className,switch):   一个布尔值 用于判断样式是否应该被添加或被移除；
  .toggleClass([switch]):   一个用来判断样式类添加还是移除的布尔值；
  .toggleClass(function(index,class,switch)[switch]):   用来返回在匹配的元素集合中的每个元素上用来切换的样式类名的一个函数 接受元素的索引位置和元素旧的样式类作为参数；

  JQurey属性与样式之样式操作.css():
  获取：
  .css(propertyName):   获取匹配元素集合中的第一个元素的样式属性的计算值；
  .css(propertyNames):   传递一组数组 返回一个对象结果；
  设置：
  .css(propertyName,value):   设置css；
  .css(propertyName,function):   可以穿入一个回调函数 返回取到对应的值进行处理；
  .css(properites):   可以传一个对象 同时设置多个样式；
  .addClass():   可以批量的给相同的元素设置统一规则 可以统一修改删除 相对.css()比较方便；

  DOM创建节点及节点属性：
  document.createElement:   创建元素；
  setAttribute:   设置属性；
  innerHTML：   添加文本；
  appendChild：   加入文档；
  .querySelector():   查询选择器 方法返回文档中匹配指定 CSS 选择器的第一个元素；
  .addEventListener：   向文档添加事件句柄；

  jQuery节点创建与属性的处理：
  $("<div></div>"):   创建元素节点；
  .append(content):   向每个元素内部添加内容 (从下面插入)；
  .qppendTo(content):   把所有匹配的元素追加到另一个 指定的元素元素集合中；

  DOM外部插入affter()与before():
  .after(content):   在匹配元素集合中的每个元素后面插入参数所指定的内容 作为兄弟节点；
  .before(content):   据参数设定 在匹配元素的前面插入内容；

  DOM创建节点及节点属性：内部插入prepend()与prependt():
  prepend:   向每个匹配的元素内部前置内容 (从上面插入)；
  prependTo:   把所有匹配的元素前置到另一个指定的元素集合中；

  DOM外部插入insertAfter()与insertBefore():
  .insertBefore:   在目标元素前面插入集合中每个匹配的元素 (不支持多参数) （和before用法相反）；
  .insertAfter:   在目标元素后面插入集合中每个匹配的元素 (不支持多参数)；

  DOM节点删除之empty(),remove()的基本用法：
  .empty():   清空一个节点 和删除不同  不仅移除子元素和其他后代元素 同样移除文本(但会保留id元素)；
  .remove():   remove与empty一样，都是移除元素的方法，但是remove会将元素自身移除，同时也会移除元素内部的一切;
  .detach():   移除对象，仅仅是显示效果没有了。但是内存中还是存在的。当你append之后，又重新回到了文档流中。就又显示出来了；

  DOM拷贝clone():
  .clone():   方法深度 复制所有匹配的元素集合，包括所有匹配元素、匹配元素的下级元素、文字节点；

  DOM替换replaceWitch()和replaceAll():
  .replaceWith(newContent)：  用提供的内容替换集合中所有匹配的元素并且返回被删除元素的集合；
  .replaceAll(target)：   用集合的匹配元素替换每个目标元素；

  DOM包裹wrap()方法：
  .wrap( wrappingElement )：   在集合中匹配的每个元素周围包裹一个HTML结构；
  .wrap( function ) ：   一个回调函数，返回用于包裹匹配元素的 HTML 内容或 jQuery 对象(与第一种类似，只是写法不一样)；
  .unwarp():   将匹配元素集合的父级元素删除，保留自身（和兄弟元素，如果存在）在原来的位置；
  .wrapAll( wrappingElement )：   给集合中匹配的元素增加一个外面包裹HTML结构；
  .wrapInner( wrappingElement )：   给集合中匹配的元素的内部，增加包裹的HTML结构；

  jQuery遍历之children()方法：
  .children(selector)：    方法是返回匹配元素集合中每个元素的所有子元素（仅儿子）；
  .find()：   和.children()方法是相似的.children只查找第一级的子节点.find查找范围包括子节点的所有后代节点；
  .parent():   查找合集里面的每一个元素的父元素 因为是父元素，这个方法只会向上查找一级；
  .parents():   查找合集里面的每一个元素的所有祖辈元素；
  .closest():   closest向上查找，直到找到一个匹配的就停止查找，parents一直查找到根元素 返回的是包含零个或一个元素的jquery对象;
  .next():   next匹配合集中每一个元素的下一个兄弟元素；
  .prev():   快速查找指定元素集合中每一个元素紧邻的前面同辈元素的元素集合；
  .siblings():   快速查找指定元素集合中每一个元素的同辈元素；
  .add()：   往合集中添加一新的元素 参数可以几乎接受任何的$()，包括一个jQuery选择器表达式，DOM元素，或HTML片段引用；

  jQuery鼠标事件之mousedown与mouseup事件：
  .mousedown()：   强调是按下触发 如果在一个元素按住了鼠标不放，并且拖动鼠标离开这个元素，并释放鼠标键，这仍然是算作mousedown事件；
  .mouseup():   p强调是松手触发，与mousedown是相反的 mouseup与mousedown组合起来就是click事件;
  .mousemove():   以监听用户移动的的操作；
  .mouseover()：  移入操作；
  .mouseenter()：   事件只会在绑定它的元素上被调用，而不会在后代节点上被触发；
  .hover():   切换事件 这个方法里头封装的是mouseenter(), mouseleave()两个方法；
  .focusin()：   用来指定触发一个事件；
  .focusout():   点击触发失去焦点；
  .focus()与.blur()事件：  必须绑定在元素本身 因为他不支持冒泡，focusin与focusout支持冒泡
  .change():   监听元素的值的改变；
  .select():   当textarea或文本类型的input元素中的文本被选择时 会发生select事件 这个函数会调用执行绑定到select事件的所有函数;
  .submit():   捕获提交表达动作 后面添加 return false 可以阻止提交;
  .keydown():   用户的按下事件；
  .keyup():   用户的松开事件；
  .KeyPress():   主要用来接收字母、数字等ANSI字符，而 KeyDown 和 KeyUP 事件过程可以处理任何不被 KeyPress 识别的击键；
  .on():   可以为一个元素绑定一个单击事件，也可以通过空格分离，传递不同的事件名，可以同时绑定多个事件；
  .off():   删除on绑定的事件  无参数删除全部；
  event.stopPropagation() 方法：阻止事件冒泡；
  event.which：获取在鼠标单击时，单击的是鼠标的哪个键；
  event.currentTarget : 在事件冒泡过程中的当前DOM元素；
  .trigger(): 触发事件；
  .triggerHandler():   不会触发浏览器的默认行为；

  JQure动画：
  .hide():   隐藏元素；
  .hide("fast / slow")：   这是一个动画设置的快捷方式，'fast' 和 'slow' 分别代表200和600毫秒的延时，就是元素会执行200/600毫秒的动画后再隐藏；
  duration：   设置动画持续时间；
  complete:   当事件完成以后；
  .show():   展示元素；
  .toggle():   隐藏显示转换 如果状态是显示则隐藏 反之显示；
  .slideDown()：用滑动动画显示一个匹配元素；
  .slideUp()：   用上卷动画隐藏一个匹配元素；
  .slideToggle():   隐藏显示转换 用（上卷动画 下卷动画）转换；
  .hadeOut():   淡入淡出隐藏效果；
  .fadeIn():   淡入淡出显示效果 用法和隐藏一样； 
  .fadeToggle():   淡入淡出隐藏显示转换  如果状态是显示则隐藏 反之显示；
  .fadeTo():   渐变的opacity（透明度）的值 只能是为1或者0  用此方法可以暂停动画 变相设置透明度；
  .animation():   可以精确地控制样式属性从而执行动画；
  step：function(a,b)：  表示每个动画的每一步完成之后都要执行函数；
  .stop()：   停止当前动画；
  .stop(true)：   停止所有队列；
  .stop(true,true)：   停止所有动画 直接跳到动画的结束；
  $.each():   遍历数组元素；
  $.inArray():   查找数组中相匹配的元素的相对的索引值；
  $.trim():   函数用于去除字符串两端的空白字符；
  .get(a):   找到第a+1个元素 get方法是获取dom对象，eq方法是获取jq对象；
  .index()：   从匹配的元素中搜索给定元素的索引值，从0开始计数；
  .ready():    当鼠标进入指定区域 发生事件；
